@{
    ViewBag.Title = "Tablero";
}


<canvas id="c" style="border: 1px #000 solid; cursor: pointer; background-color: black; "></canvas>


<div class="btn-toolbar" role="toolbar">

    <div class="btn-group btn-group-sm">
        <button id="pick-color" type="button" class="btn btn-default"><span class="fa fa-square " title="Pick a color" ></span></button>
        <div class="colorpalette" style="display:none;"></div>
    </div>
    <div class="btn-group btn-group-sm">
        <button type="button" class="btn btn-default reset"><span class="glyphicon glyphicon-trash " data-toggle="tooltip" data-placement="bottom" title="Reset - erases everything" style="color: black;"></span></button>
        <button type="button" class="btn btn-default eraser"><span class="fa fa-eraser " data-toggle="tooltip" data-placement="bottom" title="Eraser - increases line width" style="color: black;"></span></button>
        <button type="button" class="btn btn-default export"><span class="glyphicon glyphicon-floppy-disk" data-toggle="tooltip" data-placement="bottom" title="Save drawing"></span></button>
        
        <div class="btn-group btn-group-sm">
            <button type="button" class="btn btn-default">Background</button>
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <span class="caret"></span>
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu" role="menu">
                <li><a href="#" class="switch-back">White</a></li>
                <li><a href="#" class="switch-back">Black</a></li>

            </ul>

        </div>
    </div>
    <div class="btn-group btn-group-sm">
        <button type="button" class="btn btn-primary dropdown-toggle" title="Untick to mute the user" data-toggle="dropdown">
            Online Users <span class="badge" id="counter">0</span>
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" id="status">
        </ul>
    </div>
</div>
<br />
<div class="modal fade" id="modal_name">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">

                <h4 class="modal-title">What's your name?</h4>
            </div>
            <div class="modal-body">
                <p>I need it before we start:</p>
                <input type="text" id="name-text" class="form-control" placeholder="Enter name or nickname" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="ok-name">OK</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->

<video id="localVideo" controls autoplay></video>
<video id="remoteVideo" controls autoplay></video>
@section scripts
{


    @Scripts.Render("~/bundles/Tablero")
    @Scripts.Render("~/bundles/signalr")

    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>

    <script>
        $(function() {
            var tablero = null;
            var tableroHub = $.connection.tableroHub;
            var name = $.cookie('name');
            var videoRecipient = '';
            var pc_config = { "iceServers": [{ "url": "stun:stun.l.google.com:19302" }] };

            ///Establishes the connection with the Hub
            var connect = function () {
                $.connection.hub.start().done(function () {
                    tablero = $('#c').Tablero({
                        remoteDraw: function (shape) {
                            tableroHub.server.draw(shape);
                        }
                    });
                }).then(function () {
                    tableroHub.server.getConnectedUsers(name);
                    $('#user_name').text('Welcome, ' + name.substring(0, 1).toUpperCase() + name.substring(1));
                }).fail(function (error) {
                    console.log(error);
                });
            };

            // Create an RTCPeerConnection via the polyfill (adapter.js).
            var pc = new RTCPeerConnection(pc_config);
            //var pc = new RTCPeerConnection(null);
            var iceCandidates = [];

            var video_constraints = {
                audio: false,
                video: {
                    mandatory: {
                        maxWidth: 320,
                        maxHeight: 240
                    },
                    optional: []
                }
            };
            
          
            if (name == null || name == '') {
                $('#modal_name').modal();
            } else {
                connect();
            }

            /*
            *  WebRTC-related methods to initiate a video-conferencing call.
            */

            /*
               The video conference handshake starts when one user requests to start a video conference. 
               (See click handler for .fa-video-camera.) At that point an Offer (Session Description Object) 
               is generated and sent to the intended recipient. The server invokes this method (from the HUB) on the
               intended recipient so that he can accept the offer and set it as its remoteDescription on his RTCPeerConnection. 
               In turn, the recipient generates an Answer (another SDP object) and sends it back to the caller so that he can
               set this Answer as its own remoteDescription on the RTCPeerConnection 
            */
            tableroHub.client.acceptOffer = function(offer, otherPeer) {
                var result = $.parseJSON(offer);
                getUserMedia(video_constraints, function(localStream) {
                    var localVideo = document.getElementById('localVideo');
                    attachMediaStream(localVideo, localStream);
                    pc.addStream(localStream);

                    pc.setRemoteDescription(new RTCSessionDescription(result.sdp), function() {
                        pc.createAnswer(function(answer) {
                            pc.setLocalDescription(answer, function () {
                                $.each(iceCandidates, function (index, value) {
                                    if (value != undefined && value != null) {
                                        pc.addIceCandidate(new RTCIceCandidate(value));
                                    }
                                });
                                tableroHub.server.sendAnswer(JSON.stringify({ 'sdp': answer }), otherPeer);                                
                            });
                        });
                    });


                }, function(error) {
                    console.log('unable to get video going', error);
                });
            };

          
            /*
            *  Since the recipient replied with an "Answer" (SDP) it calls this method on the caller
            *  so that he can take the answer and set it as its remoteDescrption on its RTCPeerConnection
            */
            tableroHub.client.acceptAnswer = function(answer) {
                var descrip = new RTCSessionDescription($.parseJSON(answer).sdp);
                pc.setRemoteDescription(descrip, function() {
                    $.each(iceCandidates, function (index, value) {
                        if (value != undefined && value != null) {
                            pc.addIceCandidate((value));
                        }
                    });
                    iceCandidates.length = 0;//Handshake done. Clear the ICE.
                }, function(error) {
                    console.log(error);
                });
            };

            /* If the caller sends an Offer (SDP object - Session Description Protocol)
            * A bunch of ICE candidates will be generated automatically. 
            * The caller needs to send this information over to the recipient.
            * But BOTH, the caller and the recipient SHOULD NOT add the candidates to the
            * RTCPeerConnection until each calls remoteDescription on the RTCPeerConnection
            */
            tableroHub.client.receiveCandidate = function (ice) {
                var m = $.parseJSON(ice);
                if (m.candidate) {
                    iceCandidates.push(m.candidate);
                }

            };

            /*
            * This method fires always on the peer initiating the call.
            * Store the ICE in a local array and add all of them as soon as you
            * get the Answer from the remote peer, after you have called setRemoteDescription
            */
            pc.onicecandidate = function (evt) {
                if (evt.candidate) {
                    iceCandidates.push(evt.candidate);//add it for now
                    tableroHub.server.sendCandidate(JSON.stringify({ 'candidate': evt.candidate }), videoRecipient);
                }
            };

            /*
            * Ok, we got remote video! attach it to the page. We are done!
            */
            pc.onaddstream = function (evt) {
                var remoteVideo = document.getElementById('remoteVideo');
                attachMediaStream(remoteVideo, evt.stream);
            };


            /*
            * Event handlers and initialization for the various widgets in the page
            */

            

            $('#ok-name').click(function () {
                name = $('#name-text').val();

                if (name == '') {
                    $('#modal_name').modal('show');
                } else {
                    $('#modal_name').modal('hide');
                    $.cookie('name', name);
                    connect();
                }
            });

            $('.colorpalette').colorPalette().on('selectColor', function(e) {
                $(this).toggle();
                tablero.changeColor(e.color);
                $('#pick-color').css({ color: e.color });
            });

            $('#pick-color').click(function() {
                $('.colorpalette').toggle();
            });

            $('span[data-toggle="tooltip"]').tooltip();

            $('.reset').click(function() {
                tableroHub.server.reset();
                tablero.reset();
            });

            $('.eraser').click(function() {
                tablero.eraser();
            });

            $('.switch-back').click(function() {
                tablero.changeBackgroundColor($(this).text());

            });

            $('.export').click(function() {
                tablero.exportImage();
            });

            $(document).on('click', 'i.fa-video-camera:not(.disabled)', function () {
                var user = $(this).parent().text();
                getUserMedia(video_constraints, function (localStream) {
                    try {
                        videoRecipient = user;
                        var video = document.getElementById('localVideo');
                        pc.addStream(localStream);
                        attachMediaStream(video, localStream);
                        pc.createOffer(function (desc) {
                            pc.setLocalDescription(desc, function () {
                                tableroHub.server.sendOffer(JSON.stringify({ 'sdp': desc }), videoRecipient);
                            });
                        });

                    } catch (e) {
                        console.log(e);
                        alert("there's no one to talk to :_(");
                    }
                }, function (error) {
                    console.log('Error initiating video conference', error);
                });
                
            });

            $(document).on('click', 'input.block:enabled', function() {
                var user = $(this).parent().text();
                if (this.checked) {
                    tablero.unblock(user);
                } else {
                    tablero.block(user);
                }
            });

            //prevent scrolling on touch devides
            //document.body.addEventListener('touchmove', function(event) {
            //    event.preventDefault();
            //}, false);
           
            ///UI initialization of some widgets
            $('#c').width($('.container').width());
            $('#c').height($(document).height() - 250);
            $('#pick-color').css({ color: 'yellow' });

           /*
           *  Tablero-related functions
           */
            //Client-side implementations of the HUB functions (see TableroHub.cs)
            tableroHub.client.reset = function (sender) {
                tablero.reset(sender);
            };

            tableroHub.client.draw = function (shape) {
                tablero.draw(shape);
            };

            tableroHub.client.changeColor = function (color) {
                tablero.changeColor(color);
            };

            tableroHub.client.listConnectedUsers = function (users) {
                var content = '';
                var count = 0;
                $.each(users, function (index, value) {
                    content += $('<li/>').text(value.user + (value.connection_id == $.connection.hub.id ? ' (You)' : '')).append('<input class="block" type="checkbox" ' + (tablero.isUserIgnored(value.user) == false ? 'checked="checked" ' : '') + (value.connection_id == $.connection.hub.id ? ' disabled="disabled" ' : '') + ' "  />').append('  <i class="fa fa-video-camera '+ (value.connection_id == $.connection.hub.id ? ' disabled ' : '')+ '"></i>').wrapInner('<span class="checkbox" />').wrapInner("<a/>")[0].outerHTML;
                    count++;
                });
                $('#counter').text(count);
                $('#status').html(content);
            };

        });

    </script>
}
